<?xml version="1.0" encoding="UTF-8" ?>

  <!-- ============================================  -->
  <!-- @todo: update makefile   -->
  <!-- @todo: create generic git task (see http://reload.github.io/phing-drupal-template/#section-138)   -->
  <!-- @todo: apache restart permissions -->
  <!-- @todo: copy gitignore to project? -->
  <!-- @todo: use build.project.properties from repo if available -->
  <!-- @todo ssh-copy-id -->
  <!-- @todo RENAME PROPERTIES FILES AFTER COPY DURING init -->

  <!-- ============================================  -->

<project name="Drupal Build" default="default" basedir="./">

  <!-- ============================================  -->
  <!-- Target: default                               -->
  <!-- ============================================  -->
  <target name="default" description="The default target used when no arguments have been given">

    <exec command="phing -f ${phing.file} -l" outputProperty="default.phing-targets" />
    <echo>Please select a target.</echo>
    <echo>${default.phing-targets}</echo>
    <echo>${project.basedir}</echo>
  </target>

  <!-- ============================================  -->
  <!-- Target: init                               -->
  <!-- ============================================  -->
  <target name="init" description="onetime init tasks">

    <property file="${phing.dir}/build.properties" override="true" />

    <phingcall target="-add-config-files" />

    <phingcall target="-get-phingdrushtask" />

  </target>  


  <!-- ============================================ -->
  <!-- Target: build-new                            -->
  <!-- ============================================ -->
  <target name="build-new" description="build tasks for a new local copy of a new site" depends="-bootstrap">

      <!-- <phingcall target="-get-project" /> -->
       
      <phingcall target="-drush-make" /> 
      <phingcall target="-add-drush-aliases" /> 
      <phingcall target="-install-drupal" />
      <phingcall target="-add-private-directories" />
      <phingcall target="-add-vhost" />
      <phingcall target="-fix-file-permissions" /> 

  </target>
  
  <!-- ============================================ -->
  <!-- Target: build-existing                       -->
  <!-- ============================================ -->
  <target name="build-build" description="build tasks for a new local copy of an existing site" depends="-bootstrap">
      
      <phingcall target="-get-project" />
      <phingcall target="-add-drush-aliases" />
      <phingcall target="-install-drupal" />
      <phingcall target="-add-private-directories" />
      <phingcall target="sync-down" />
      <phingcall target="-add-vhost" />
      <phingcall target="-fix-file-permissions" /> 

  </target>


  <!-- ============================================ -->
  <!-- Target: build-existing                       -->
  <!-- ============================================ -->
  <target name="build-rebuild" description="build tasks for an existing local copy of an existing site" depends="-bootstrap">
      
      <phingcall target="-get-project" />
      <phingcall target="-add-drush-aliases" />
      <phingcall target="-add-private-directories" />
      <phingcall target="sync-down" />
      <phingcall target="-add-vhost" />
      <phingcall target="-fix-file-permissions" /> 

  </target>

  <!-- ============================================ -->
  <!-- Target: fix-file-permissions                 -->
  <!-- ============================================ -->
  <target name="fix-file-permissions" description="run fix file permissions script for a secure drupal setup" depends="-bootstrap">
      <phingcall target="-fix-file-permissions" /> 
  </target>

  <!-- ============================================ -->
  <!-- Target: -drush-make                          -->
  <!-- ============================================ -->
  <target name="-drush-make" description="download drupal using makefile" depends="-bootstrap">

      <drush command="make" root="${project.basedir}" assume="yes">
        <param>${project.basedir}/build_config/build.make</param>
        <param>${project.basedir}/${drupal.dir.root}</param>
        <option name="working-copy">1</option>
        <option name="concurrency">5</option>   
      </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: add-drush-aliases                    -->
  <!-- ============================================ -->
  <target name="add-drush-aliases" description="add drush aliases for diff environments" depends="-bootstrap">

      <phingcall target="-add-drush-aliases" />

  </target>

  <!-- ============================================  -->
  <!-- Target: notify-security-updates               -->
  <!-- ============================================  -->
  <target name="notify-security-updates" description="notify admin of any available security updates" depends="-bootstrap, -get-sites">
    
    <!-- call for each multi-site site -->
    <if>
      <referenceexists ref="-get-sites.directories" />
      <then>
        <foreach param="site.name" absparam="drupal.site.path" target="-notify-security-updates">          
          <fileset refid="-get-sites.directories" />
        </foreach>
      </then>
    </if>
    
    <!-- then call for standalone site -->
    <phingcall target="-notify-security-updates" />

  </target>

  <!-- ============================================  -->
  <!-- Target: -get-sites                            -->
  <!-- ============================================  -->
  <target name="-get-sites" description="get fileset of all (multisite) sites" hidden="true">
    <fileset dir="${project.basedir}/${drupal.dir.root}/sites/" excludes="all,default,scripts" id="-get-sites.directories">
      <type type="dir" />
      <depth max="0" min="0" />
    </fileset>
  </target>

  <!-- ============================================  -->
  <!-- Target: -get-site-path                        -->
  <!-- ============================================  -->
  <target name="-get-site-path" description="set site path for multisite or single site" hidden="true">

    <if>
      <not>
        <isset property="drupal.site.path" />
      </not>
      <then>
        <property name="drupal.site.path" value="${project.basedir}/${drupal.dir.root}" />
      </then>
    </if>

  </target>

  <!-- ============================================  -->
  <!-- Target: notify-security-updates               -->
  <!-- ============================================  -->
  <target name="-notify-security-updates" description="notify admin of any available security updates" depends="-get-site-path, -get-site-info, -get-security-updates" hidden="true">

    <if>
      <istrue value="${get-security-updates.list}"/>
      <then>
        <property name="notify-security-updates.message" value="${get-security-updates.list}" />
      </then>
      <else>
        <property name="notify-security-updates.message" value="No security updates required :)" />
      </else>
    </if>

    <mail tolist="${notify-security-updates.email}" from="${get-site-info.sitename}@${host.name}" subject="Drupal security updates">${get-site-info.sitename}@${host.name}${line.separator}${line.separator}${notify-security-updates.message}</mail>    

    <echo msg="${get-site-info.sitename}@${host.name}${line.separator}${line.separator}${notify-security-updates.message}" />
    
  </target>


  <!-- ============================================ -->
  <!-- Target: add vhost                            -->
  <!-- ============================================ -->  
  <target name="-add-vhost" description="add vhost new site" hidden="true">

    <phingcall target="-create-vhost-file" />
    <phingcall target="-restart-webserver" />

  </target>

  <!-- ============================================ -->
  <!-- Target: add drush aliases                    -->
  <!-- ============================================ --> 
  <target name="-add-drush-aliases" description="add drush aliases for diff environments" hidden="true">    
     
    <fileset dir="${phing.dir}" id="add-drush-aliases.files">
      <include name="drush/*.*" />          
    </fileset>

    <copy todir="${project.basedir}/${drupal.dir.root}/sites/all/" overwrite="true">
      <fileset refid="add-drush-aliases.files" />
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>

    <exec command="mv .gitignore.tpl .gitignore" dir="${project.basedir}/${drupal.dir.root}/sites/all/drush/" passthru="true" checkreturn="true"/>
   
  </target>
  
  <!-- ============================================ -->
  <!-- Target: add private directories             -->
  <!-- ============================================ --> 
  <target name="-add-private-directories" description="add private directories and set corrent permissions" hidden="true">  

    <exec command="mkdir -p ${drupal.dir.private}/drush_dump" dir="${project.basedir}" passthru="true" checkreturn="true"/>
    <exec command="sudo chown ${permissions.owner}:${permissions.group}  ${drupal.dir.private} -R" dir="${project.basedir}" passthru="true" checkreturn="true"/>
    <exec command="sudo chmod 770  ${drupal.dir.private} -R" dir="${project.basedir}" passthru="true" checkreturn="true"/>

   </target>

  <!-- ============================================ -->
  <!-- Target: add config files                    -->
  <!-- ============================================ --> 
  <target name="-add-config-files" description="add build config files to project" hidden="true">    
     
    <fileset dir="${phing.dir}" id="add-config-files.files">
      <include name="build_config/*.*" />          
    </fileset>
    
    <if>      
      <available file="${project.basedir}/build_config" type="dir" />
        <then>
          <!-- prevent config files being overwritten because overwrite="false" only applies to files if dest is newer than source -->
          <exec command="touch --no-create build.env.properties" dir="${project.basedir}/build_config" />
          <exec command="touch --no-create build.project.properties" dir="${project.basedir}/build_config" />
        </then>
    </if>

    <copy todir="${project.basedir}" overwrite="false">
      <fileset refid="add-config-files.files" />
    </copy>

    <exec command="mv .gitignore.tpl .gitignore" dir="${project.basedir}/build_config" passthru="true" checkreturn="true"/>

  </target>
  
  <!-- ============================================ -->
  <!-- Target: get project                    -->
  <!-- ============================================ -->
  <target name="-get-project" description="get source code for project" hidden="true"> 
   
    <if>
      <not>
        <available file="${project.basedir}/.git" type="dir" />        
      </not>
      <then>
        <phingcall target="-clone-project" />
        <phingcall target="-move-project" />
      </then>
    </if>

    <phingcall target="-get-develop-branch" />
    <phingcall target="-ignore-git-file-mode-changes" />

  </target>

  <!-- ============================================ -->
  <!-- Target: get phing drush task                      -->
  <!-- ============================================ -->
  <target name="-get-phingdrushtask" description="get phing drush task from repo" hidden="true"> 
   
    <if>
      <not>
        <available file="${phing.dir}/tools/phingdrushtask/.git" type="dir" />        
      </not>
      <then>
        <phingcall target="-clone-phingdrushtask" />
      </then>
    </if>

    <phingcall target="-get-phingdrushtask-branch" />

  </target>

  <!-- ============================================ -->
  <!-- Target: init drupal                       -->
  <!-- ============================================ --> 
  <target name="-install-drupal" description="perform drupal install (create db and settings.php file)" hidden="true">
    
    <!-- <exec command="sudo chown ${permissions.owner}:${permissions.group} default -R" dir="${project.basedir}/${drupal.dir.root}/sites" passthru="true" checkreturn="true"/>
    <exec command="sudo chmod 770 default -R" dir="${project.basedir}/${drupal.dir.root}/sites" passthru="true" checkreturn="true"/>

    <exec command="sudo rm -f settings.php ${env.name}.settings.php" dir="${project.basedir}/${drupal.dir.root}/sites/default" passthru="true" checkreturn="true"/> -->
   
    <drush command="site-install" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <param>standard</param>
      <option name="db-url">${db.driver}://${db.user}:${db.password}@${db.host}:3306/${db.name}</option>
      <option name="site-name">${project.name}</option>
      <!--<option name="sites-subdir">"${project.name}"</option>-->
      <option name="db-su">${db.root-user}</option>
      <option name="db-su-pw">${db.root-password}</option>
      <option name="account-name">${drupal.username}</option>
      <option name="account-pass">${drupal.password}</option>      
    </drush>

    <exec command="sudo mv settings.php ${env.name}.settings.php &amp;&amp; sudo ln -s ${env.name}.settings.php settings.php" dir="${project.basedir}/${drupal.dir.root}/sites/default" passthru="true" checkreturn="true"/>    

  </target>
  
  <!-- ============================================ -->
  <!-- Target: sync-db                              -->
  <!-- ============================================ --> 
  <target name="sync-down" description="pull latest db and files from (remote) dev to local" depends="-bootstrap">
    
    <phingcall target="-dump-db-local" />
    
    <phingcall target="-sync-down-db" />   
    
    <phingcall target="-sync-down-files" />

    <phingcall target="-clear-drupal-cache" />   
    
    <phingcall target="-update-drupal-password" />     
    
    <!-- @todo:
    echo "sync'ing private upload files..."
    drush -y rsync @${config_drupal_siteName}.$SOURCE:%private-uploads @${config_drupal_siteName}.$DEST:%private-uploads
    -->

  </target>

  <!-- ============================================ -->
  <!-- Target: fix-file-permissions                 -->
  <!-- ============================================ --> 
  <target name="-fix-file-permissions" description="run fix file permissions script for a secure drupal setup" hidden="true">   

    <exec command="sudo bash ${phing.dir}/tools/fix-permissions.sh --drupal_path=${project.basedir}/${drupal.dir.root} --drupal_user=${permissions.owner} --httpd_group=${permissions.group}" dir="${project.basedir}" passthru="true" checkreturn="true"/>
  </target>

  <!-- ============================================ -->
  <!-- Target: -dump-db-local                        -->
  <!-- ============================================ --> 
  <target name="-dump-db-local" description="dump copy of local db to timestamped file in private dir" hidden="true">    
  
    <!-- generate date/time variables (${DSTAMP} ${TSTAMP} ${TODAY}) -->
    <tstamp />

    <drush command="sql-dump" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <option name="result-file">${project.basedir}/${drupal.dir.private}/drush.dump.${DSTAMP}_${TSTAMP}.sql</option>
      <option name="structure-tables-key">common</option>      
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -sync-down-db                        -->
  <!-- ============================================ --> 
  <target name="-sync-down-db" description="synchronise local db with that from (remote) dev" hidden="true">    
  
    <drush command="sql-sync" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <param>@dev</param>
      <param>@${env.name}</param>      
      <option name="no-cache">1</option>
      <option name="create-db">1</option>
      <option name="db-su">${db.root-user}</option>
      <option name="db-su-pw">${db.root-password}</option>
      <option name="structure-tables-key">common</option>
      <option name="sanitize">1</option>    
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -sync-down-files                        -->
  <!-- ============================================ --> 
  <target name="-sync-down-files" description="synchronise local files directory with that from (remote) dev" hidden="true">    
    
    <!-- @todo: move this? -->
    <if>
      <not>
        <available file="${project.basedir}/${drupal.dir.root}/${drupal.dir.files}" type="dir" />        
      </not>
      <then>
        <exec command="mkdir -p ${drupal.dir.files}" dir="${project.basedir}/${drupal.dir.root}" passthru="true" checkreturn="true"/>
      </then>
    </if>

    <drush command="rsync" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <param>@dev:%files</param>
      <param>@${env.name}:%files</param> 
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -clear-drupal-cache                  -->
  <!-- ============================================ --> 
  <target name="-clear-drupal-cache" description="clear drupal cache" hidden="true">    
  
    <drush command="cc" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <param>all</param>
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -drupal-update-password                 -->
  <!-- ============================================ --> 
  <target name="-update-drupal-password" description="update drupal password to that in properties file" hidden="true">    
  
     <drush command="upwd" root="${project.basedir}/${drupal.dir.root}" assume="yes">
      <param>${drupal.username}</param>
      <option name="password">${drupal.password}</option>
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: clone-project                        -->
  <!-- ============================================ -->
  <target name="-clone-project" description="clone repo to temp dir to get around non-empty directory errors" hidden="true">    
  
    <echo msg="Cloning source repository..." />
    <exec command="git clone ${project.repo} build_clone-project_tmp" dir="${project.basedir}" passthru="true" checkreturn="true"/>

  </target> 
  
  <!-- ============================================ -->
  <!-- Target: clone-phingdrushtask                        -->
  <!-- ============================================ -->
  <target name="-clone-phingdrushtask" description="clone repo to temp dir to get around non-empty directory errors" hidden="true">    
  
    <echo msg="Cloning source repository..." />
    <exec command="git clone --branch ${phing.drush.branch} ${phing.drush.repo} phingdrushtask" dir="${phing.dir}/tools" passthru="true" checkreturn="true"/>

  </target> 

  <!-- ============================================ -->
  <!-- Target: move-project                         -->
  <!-- ============================================ --> 
  <target name="-move-project" description="moved cloned project into project root"  hidden="true">  

    <fileset dir="${project.basedir}/build_clone-project_tmp" id="move-project.files" defaultexcludes="false">
      <include name="**/*" />   
    </fileset>

    <copy todir="${project.basedir}" overwrite="true">
      <fileset refid="move-project.files" />
    </copy>

    <delete dir="${project.basedir}/build_clone-project_tmp" />

  </target>

  <!-- ============================================ -->
  <!-- Target: -ignore-git-file-mode-changes                         -->
  <!-- ============================================ --> 
  <target name="-ignore-git-file-mode-changes" description="configure git to ignore file mode (permission) changes"  hidden="true">  

    <exec command="git config core.fileMode false" dir="${project.basedir}" passthru="true" checkreturn="true"/>

  </target>

  <!-- ============================================ -->
  <!-- Target: get-develop-branch                   -->
  <!-- ============================================ -->
  <target name="-get-develop-branch" description="get latest develop branch" hidden="true">  

    <exec command="git checkout develop" dir="${project.basedir}" passthru="true" checkreturn="true"/>
    <exec command="git pull origin develop" dir="${project.basedir}" passthru="true" checkreturn="true"/>

  </target> 


  <!-- ============================================ -->
  <!-- Target: get-phingdrushtask-branch                   -->
  <!-- ============================================ -->
  <target name="-get-phingdrushtask-branch" description="get latest phingdrushtask branch" hidden="true">  

    <exec command="git checkout ${phing.drush.branch}" dir="${phing.dir}/tools/phingdrushtask" passthru="true" checkreturn="true"/>
    <exec command="git pull origin ${phing.drush.branch}" dir="${phing.dir}/tools/phingdrushtask" passthru="true" checkreturn="true"/>

  </target>
  
  <!-- ============================================ -->
  <!-- Target: create vhost file                    -->
  <!-- ============================================ --> 
  <target name="-create-vhost-file" description="create vhost file for new site" hidden="true">

    <!-- write vhosts file with the information -->
    <copy file="${phing.dir}/build.vhost.conf" tofile="${vhost.dir}/${project.url}.conf" overwrite="true">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>

  </target>

  <!-- ============================================  -->
  <!-- Target: restart webserver                     -->
  <!-- ============================================  -->
  
  <target name="restart-webserver" description="restart webserver">
    <phingcall target="-restart-webserver" />
  </target>

  <!-- ============================================  -->
  <!-- Target: restart webserver                     -->
  <!-- ============================================  -->
  <target name="-restart-webserver" description="restart webserver" hidden="true">     
    
    <!-- restart webserver on centos or apache -->
    <exec command="sudo service httpd graceful || (sudo a2ensite ${project.url}.conf &amp;&amp; sudo apache2ctl -k restart)" />
    <exec executable="echo" escape="true">

      <arg value="abc$b3!SB"/>

    </exec> 

  </target>

  <!-- ============================================  -->
  <!-- Target: init                                  -->
  <!-- ============================================  -->
  <target name="-bootstrap" description="initialise build properties" hidden="true">

    <!-- <input propertyname="env" validargs="dev,stage,prod">
      Enter environment
    </input> -->
    
    <property file="${phing.dir}/build.properties" override="true" />
    <property file="${project.basedir}/build_config/build.project.properties" override="true" />    
    <property file="${project.basedir}/build_config/build.env.properties" override="true" />    
    <taskdef name="drush" classname="DrushTask" classpath="${phing.dir}/tools/phingdrushtask" />

  </target>

  <!-- ============================================  -->
  <!-- Target: get-security-updates                  -->
  <!-- ============================================  -->
  <target name="-get-security-updates" description="Check project for available Drupal security updates" hidden="true">
    
    <phingcall target="-enable-module-update" />
  
    <exec command="drush ups --pipe=1 --format=table --security-only=1" dir="${drupal.site.path}" outputProperty="get-security-updates.list" />


    <phingcall target="-disable-module-update" />

  </target>
    
  <!-- ============================================  -->
  <!-- Target: get-site                              -->
  <!-- ============================================  -->
  <target name="-get-site-info" description="Return the current drupal sitename" hidden="true">
    
    <!-- NOTE: cannot use drush task as we cannot define site dir to run task in -->
    <exec command="drush vget site_name --format=string" dir="${drupal.site.path}" outputProperty="get-site-info.sitename" />
    
  </target>

  <!-- ============================================  -->
  <!-- Target: enable-module-update                  -->
  <!-- ============================================  -->
  <target name="-enable-module-update" description="Enable update module" hidden="true">
    
    <!-- NOTE: cannot use drush task as we cannot define site dir to run task in -->
    <exec command="drush -y en update" dir="${drupal.site.path}" />
    
  </target>

  <!-- ============================================  -->
  <!-- Target: disable-module-update                  -->
  <!-- ============================================  -->
  <target name="-disable-module-update" description="Disable update module" hidden="true">    
 
    <!-- NOTE: cannot use drush task as we cannot define site dir to run task in -->
    <exec command="drush -y dis update" dir="${drupal.site.path}" />
    
  </target>

</project>