<?xml version="1.0" encoding="UTF-8" ?>

<project name="Drupal Build" default="default" basedir="./">

  <!-- ============================================  -->
  <!-- Target: default                               -->
  <!-- ============================================  -->
  <target name="default" description="The default target used when no arguments have been given">

    <exec command="phing -f ${phing.file} -l" outputProperty="default.phing-targets" />
    <echo>Please select a target.</echo>
    <echo>${default.phing-targets}</echo>

  </target>

  <!-- ============================================  -->
  <!-- Target: install                               -->
  <!-- ============================================  -->
  <target name="install" description="onetime install tasks">

    <phingcall target="-copy-default-global-properties" />
    <phingcall target="-copy-default-env-properties" />

  </target>  

  <!-- ============================================ -->
  <!-- Target: create-database                      -->
  <!-- ============================================ 
  <target name="create-database" description="create empty db schema and user" depends="-init">

      <phingcall target="-create-database-schema" />
      <phingcall target="-create-database-user" />

  </target>-->

  <!-- ============================================  -->
  <!-- Target: notify-security-updates               -->
  <!-- ============================================  -->
  <target name="notify-security-updates" description="notify admin of any available security updates" depends="-init, -get-security-updates, -get-site-info">
    
    <if>
      <istrue value="${get-security-updates.list}"/>
      <then>
        <property name="notify-security-updates.message" value="${get-security-updates.list}" />
      </then>
      <else>
        <property name="notify-security-updates.message" value="No security updates required :)" />
      </else>
    </if>

    <mail tolist="${notify-security-updates.email}" from="${get-site-info.sitename}@${get-host.hostname}" subject="Drupal security updates">${get-site-info.sitename}@${host.name}${line.separator}${line.separator}${notify-security-updates.message}</mail>    
    
  </target>

  <!-- ============================================ -->
  <!-- Target: build                                -->
  <!-- ============================================ -->
  <target name="build" description="build tasks for a new local copy of an existing site" depends="-init">

      <phingcall target="-add-drush-aliases" />
      <phingcall target="-install-drupal" />
      <phingcall target="sync-down" />

  </target>

  <!-- ============================================ -->
  <!-- Target: sudo-build                                -->
  <!-- ============================================ -->
  <target name="sudo-build" description="build tasks for a new local copy of an existing site that must be run as sudo (use sudo phing sudo-build)" depends="-init, -test-sudo">

      <phingcall target="-add-vhost" />
      <phingcall target="-fix-file-permissions" /> 

  </target>

  <!-- ============================================ -->
  <!-- Target: build                                -->
  <!-- ============================================ -->
  <target name="fix-file-permissions" description="run fix file permissions script for a secure drupal setup" depends="-init, -test-sudo">
      <phingcall target="-fix-file-permissions" /> 
  </target>

  <!-- ============================================ -->
  <!-- Target: add vhost                            -->
  <!-- ============================================ -->  
  <target name="-add-vhost" description="add vhost new site" hidden="true">

    <phingcall target="-create-vhost-file" />
    <phingcall target="-restart-webserver" />

  </target>

  <!-- ============================================ -->
  <!-- Target: add drush aliases                    -->
  <!-- ============================================ --> 
  <target name="-add-drush-aliases" description="add drush aliases for diff environments" hidden="true">    
     
    <fileset dir="${phing.dir}" id="add-drush-aliases.files">
      <include name="drush/*.*" />          
    </fileset>

    <copy todir="${project.root}/${drupal.dir.root}/sites/all/" overwrite="true">
      <fileset refid="add-drush-aliases.files" />
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>
    
    <!-- @todo: move this? -->
    <exec command="mkdir -p ${drupal.dir.private}/drush_dump" dir="${project.root}" passthru="true" checkreturn="true"/>

  </target>
  
  <!-- ============================================ -->
  <!-- Target: get project                    -->
  <!-- ============================================ 
  <target name="get-project" description="get source code for project" depends="-init"> 
   
    <if>
      <not>
        <available file="${project.root}/.git" type="dir" />        
      </not>
      <then>
        <phingcall target="-clone-project" />
        <phingcall target="-move-project" />
      </then>
    </if>

    <phingcall target="-get-develop-branch" />

  </target>--> 

  <!-- ============================================ -->
  <!-- Target: install drupal                       -->
  <!-- ============================================ --> 
  <target name="-install-drupal" description="perform drupal install (create db and settings.php file)" hidden="true"> 
   
    <drush command="site-install" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>standard</param>
      <option name="db-url">${db.driver}://${db.user}:${db.password}@${db.host}:3306/${db.name}</option>
      <option name="site-name">"${project.name}"</option>
      <!--<option name="sites-subdir">"${project.name}"</option>-->
      <option name="db-su">${db.root-user}</option>
      <option name="db-su-pw">${db.root-password}</option>
      <option name="account-name">${drupal.username}</option>
      <option name="account-pass">${drupal.password}</option>      
    </drush>

  </target>
  
  <!-- ============================================ -->
  <!-- Target: sync-db                              -->
  <!-- ============================================ --> 
  <target name="sync-down" description="pull latest db and files from (remote) dev to local" depends="-init">
    
    <phingcall target="-dump-db-local" />
    
    <phingcall target="-sync-down-db" />   
    
    <phingcall target="-sync-down-files" />

    <phingcall target="-clear-drupal-cache" />   
    
    <phingcall target="-update-drupal-password" />     
    
    <!-- @todo:
    echo "sync'ing private upload files..."
    drush -y rsync @${config_drupal_siteName}.$SOURCE:%private-uploads @${config_drupal_siteName}.$DEST:%private-uploads
    -->

  </target>

  <!-- ============================================ -->
  <!-- Target: fix-file-permissions                              -->
  <!-- ============================================ --> 
  <target name="-fix-file-permissions" description="run fix file permissions script for a secure drupal setup" hidden="true">
    <exec command="bash /usr/local/bin/fix-permissions.sh --drupal_path=${project.root}/${drupal.dir.root} --drupal_user=${permissions.owner} --httpd_group=${permissions.group}" />
  </target>


  <!-- ============================================ -->
  <!-- Target: -dump-db-local                        -->
  <!-- ============================================ --> 
  <target name="-dump-db-local" description="dump copy of local db to timestamped file in private dir" hidden="true">    
  
    <!-- generate date/time variables (${DSTAMP} ${TSTAMP} ${TODAY}) -->
    <tstamp />

    <drush command="sql-dump" root="${project.root}/${drupal.dir.root}" assume="yes">
      <option name="result-file">${project.root}/${drupal.dir.private}/drush.dump.${DSTAMP}_${TSTAMP}.sql</option>
      <option name="structure-tables-key">common</option>
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -sync-down-db                        -->
  <!-- ============================================ --> 
  <target name="-sync-down-db" description="synchronise local db with that from (remote) dev" hidden="true">    
  
    <drush command="sql-sync" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>@dev</param>
      <param>@${env.name}</param>      
      <option name="no-cache">1</option>
      <option name="create-db">1</option>
      <option name="db-su">${db.root-user}</option>
      <option name="db-su-pw">${db.root-password}</option>
      <option name="structure-tables-key">common</option>
      <option name="sanitize">1</option>    
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -sync-down-files                        -->
  <!-- ============================================ --> 
  <target name="-sync-down-files" description="synchronise local files directory with that from (remote) dev" hidden="true">    
    
    <!-- @todo: move this? -->
    <if>
      <not>
        <available file="${project.root}/${drupal.dir.root}/${drupal.dir.files}" type="dir" />        
      </not>
      <then>
        <exec command="mkdir -p ${drupal.dir.files}" dir="${project.root}/${drupal.dir.root}" passthru="true" checkreturn="true"/>
      </then>
    </if>

    <drush command="rsync" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>@dev:%files</param>
      <param>@${env.name}:%files</param> 
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -clear-drupal-cache                  -->
  <!-- ============================================ --> 
  <target name="-clear-drupal-cache" description="clear drupal cache" hidden="true">    
  
    <drush command="cc" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>all</param>
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: -drupal-update-password                 -->
  <!-- ============================================ --> 
  <target name="-update-drupal-password" description="update drupal password to that in properties file" hidden="true">    
  
     <drush command="upwd" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>${drupal.username}</param>
      <option name="password">${drupal.password}</option>
    </drush>

  </target>

  <!-- ============================================ -->
  <!-- Target: clone-project                        -->
  <!-- ============================================
  <target name="-clone-project" description="clone repo to temp dir to get around non-empty directory errors" hidden="true">    
  
    <echo msg="Cloning source repository..." />
    <exec command="git clone ${project.repo} build_clone-project_tmp" dir="${project.root}" passthru="true" checkreturn="true"/>

  </target> --> 

  <!-- ============================================ -->
  <!-- Target: move-project                         -->
  <!-- ============================================ 
  <target name="-move-project" description="moved cloned project into project root"  hidden="true">  

    <fileset dir="${project.root}/build_clone-project_tmp" id="move-project.files" defaultexcludes="false">
      <include name="**/*" />   
    </fileset>

    <copy todir="${project.root}" overwrite="true">
      <fileset refid="move-project.files" />
    </copy>

    <delete dir="${project.root}/build_clone-project_tmp" />

  </target>--> 

  <!-- ============================================ -->
  <!-- Target: get-develop-branch                   -->
  <!-- ============================================ 
  <target name="-get-develop-branch" description="get latest develop branch" hidden="true">  

    <exec command="git checkout develop" dir="${project.root}" passthru="true" checkreturn="true"/>
    <exec command="git pull origin develop" dir="${project.root}" passthru="true" checkreturn="true"/>

  </target>--> 

  <!-- ============================================  -->
  <!-- Target: copy-default-global-properties        -->
  <!-- ============================================  -->
  <target name="-copy-default-global-properties" description="copy default global properties file to project root for user to edit"  hidden="true">

    <if>
      <available file="${phing.dir}/../build.properties" type="file" />
        <then>
          <echo msg="Properties file already exists..." />
        </then>
        <else>
          <echo msg="Copying properties file..." />
          <copy file="${phing.dir}/build.properties.default" tofile="${phing.dir}/../build.properties" overwrite="false" />
        </else>
    </if>
  </target>

  <!-- ============================================  -->
  <!-- Target: copy-default-env-properties           -->
  <!-- ============================================  -->
  <target name="-copy-default-env-properties" description="copy default environment specific properties file to project root for user to edit"  hidden="true">

    <if>
      <available file="${phing.dir}/../build.env.properties" type="file" />
        <then>
          <echo msg="Env properties file already exists..." />
        </then>
        <else>
          <echo msg="Copying env properties file..." />
          <copy file="${phing.dir}/build.env.properties.default" tofile="${phing.dir}/../build.env.properties" overwrite="false" />
        </else>
    </if>

  </target>
  
  <!-- ============================================ -->
  <!-- Target: create vhost file                    -->
  <!-- ============================================ --> 
  <target name="-create-vhost-file" description="create vhost file for new site" hidden="true">

    <!-- write vhosts file with the information -->
    <copy file="${phing.dir}/build.vhost.conf" tofile="${vhost.dir}/${project.url}.conf" overwrite="true">
      <filterchain>
        <expandproperties/>
      </filterchain>
    </copy>

  </target>  

  <!-- ============================================  -->
  <!-- Target: restart webserver                     -->
  <!-- ============================================  -->
  <target name="-restart-webserver" description="restart webserver" hidden="true">
     
    <!-- todo use built in property  <echo msg="${host.os.version}" /> -->    
    <if>
      <equals arg1="${os.flavour}" arg2="ubuntu" />
      <then>
        <!-- <exec command="service apache2 restart" /> -->
        <exec command="a2ensite ${project.url}.conf" />
        <exec command="apache2ctl -k restart" />
      </then>
    </if>

    <if>
      <equals arg1="${os.flavour}" arg2="centos" />
      <then>
        <exec command="service httpd graceful" />
      </then>
    </if>


  </target>


  
  <!-- ============================================ -->
  <!-- Target: sudo test                            -->
  <!-- ============================================ -->
  <target name="-test-sudo" description="determine if phing is being run using root" hidden="true">

    <!-- Create the currentuser property -->
    <exec command="whoami" outputProperty="-test-sudo.current-user" />
 
    <!-- Set the 'issudo' property to be true if the user is root -->
    <condition property="-test-sudo.is-sudo">
      <equals arg1="${-test-sudo.current-user}" arg2="root" />
    </condition>
 
    <!-- Fail the build if the user is not root -->
    <if>
      <not>
        <equals arg1="${-test-sudo.is-sudo}" arg2="true" />
      </not>
      <then>
        <fail message="You must run this build as sudo!" />
      </then>
    </if>

  </target>  

  <!-- ============================================  -->
  <!-- Target: init                                  -->
  <!-- ============================================  -->
  <target name="-init" description="initialise build properties" hidden="true">

    <!-- <input propertyname="env" validargs="dev,stage,prod">
      Enter environment
    </input> -->

    <property file="${phing.dir}/../build.properties" override="true" />
    <property file="${phing.dir}/../build.env.properties" override="true" />
    <taskdef name="drush" classname="DrushTask" classpath="${drush.classpath}" />

  </target>

  <!-- ============================================ -->
  <!-- Target: create-database-schema                      -->
  <!-- ============================================ 
  <target name="-create-database-schema" description="create empty db schema" hidden="true">

      <pdosqlexec url="${db.driver}:host=${db.host};" encoding="utf8" userid="${db.root-user}" password="${db.root-password}" onerror="abort">


          CREATE DATABASE IF NOT EXISTS `${db.name}`;
      </pdosqlexec>

   </target>-->

  <!-- ============================================ -->
  <!-- Target: create-database-user                 -->
  <!-- ============================================ 
  <target name="-create-database-user" description="create user for db schema" hidden="true">

       <pdosqlexec url="${db.driver}:host=${db.host};" encoding="utf8" userid="${db.root-user}" password="${db.root-password}" onerror="abort">

          GRANT ALL ON ${db.name}.* TO '${db.user}'@'${db.host}' IDENTIFIED BY '${db.password}';
          GRANT RELOAD ON *.* TO '${db.user}'@'${db.host}';
          FLUSH PRIVILEGES;

       </pdosqlexec>

  </target> -->

  <!-- ============================================  -->
  <!-- Target: get-security-updates                  -->
  <!-- ============================================  -->
  <target name="-get-security-updates" description="Check project for available Drupal security updates" hidden="true">
    
    <phingcall target="-enable-module-update" />

    <drush command="ups" root="${project.root}/${drupal.dir.root}" returnProperty="get-security-updates.list">
      <option name="pipe">1</option>
      <option name="format">table</option>
      <option name="security-only">1</option>
    </drush>

    <phingcall target="-disable-module-update" />

  </target>
    
  <!-- ============================================  -->
  <!-- Target: get-site                              -->
  <!-- ============================================  -->
  <target name="-get-site-info" description="Return the current drupal sitename" hidden="true">
    
    <drush command="vget" root="${project.root}/${drupal.dir.root}" returnProperty="get-site-info.sitename" >
      <option name="format">string</option>
      <param>site_name</param>
    </drush>
    
  </target>

  <!-- ============================================  -->
  <!-- Target: enable-module-update                  -->
  <!-- ============================================  -->
  <target name="-enable-module-update" description="Enable update module" hidden="true">
    
    <drush command="en" root="${project.root}/${drupal.dir.root}" assume="yes">
      <param>update</param>
    </drush>
    
  </target>

  <!-- ============================================  -->
  <!-- Target: disable-module-update                  -->
  <!-- ============================================  -->
  <target name="-disable-module-update" description="Disable update module" hidden="true">
    
    <drush command="dis" root="${project.root}/${drupal.dir.root}" assume="yes">      
      <param>update</param>
    </drush>
    
  </target>

</project>